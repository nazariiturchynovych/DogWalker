// <auto-generated />
using System;
using DogWalker.Infrastructure.DataBase.DogWalkerDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DogWalker.Infrastructure.Migrations
{
    [DbContext(typeof(DogWalkerDbContext))]
    [Migration("20230215210026_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DogWalker.Domain.Entities.Chat.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Chat.ChatMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<bool>("Creator")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMember");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Chat.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ChatMemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatMemberId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.DogFamily.Dog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Age")
                        .HasColumnType("double precision");

                    b.Property<int>("DogFamilyId")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int?>("JobRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Preferences")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DogFamilyId");

                    b.HasIndex("JobRequestId");

                    b.ToTable("Dog");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.DogFamily.DogFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Adress")
                        .HasColumnType("integer");

                    b.Property<int>("DogsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DogFamily");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Job.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DogFamilyId")
                        .HasColumnType("integer");

                    b.Property<int>("JobRequestId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("WalkerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DogFamilyId");

                    b.HasIndex("JobRequestId");

                    b.HasIndex("WalkerId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Documents.PersonalIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonalIdentifierType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonalIdentifier");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.JobRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DogFamilyId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPersonalIdentifierRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("RequiredAge")
                        .HasColumnType("integer");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DogFamilyId");

                    b.ToTable("JobRequest");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Routes.JobDayRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegularRouteId")
                        .HasColumnType("integer");

                    b.Property<string[]>("RelayPoints")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegularRouteId");

                    b.ToTable("JobDayRoute");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Routes.OneTimeRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobRequestId")
                        .HasColumnType("integer");

                    b.Property<string[]>("RelayPoints")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobRequestId")
                        .IsUnique();

                    b.ToTable("OneTimeRoute");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Routes.RegularRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobRequestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobRequestId")
                        .IsUnique();

                    b.ToTable("RegularRoute");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Schedules.JobDaySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("RegularScheduleId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RegularScheduleId");

                    b.ToTable("JobDaySchedule");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Schedules.OneTimeSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("JobRequestId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobRequestId")
                        .IsUnique();

                    b.ToTable("OneTimeSchedule");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Schedules.RegularSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobRequestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobRequestId")
                        .IsUnique();

                    b.ToTable("RegularSchedule");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Schedule.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("WalkerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WalkerId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("FacebookAuth")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("GoogleAuth")
                        .HasColumnType("boolean");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<bool>("InstagramAuth")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Walker.Walker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Walker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.User.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int>("RoleId1")
                        .HasColumnType("integer");

                    b.Property<int>("UserId1")
                        .HasColumnType("integer");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Chat.ChatMember", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.Chat.Chat", "Chat")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogWalker.Domain.Entities.User.User", "User")
                        .WithMany("ChatMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Chat.Message", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.Chat.ChatMember", "ChatMember")
                        .WithMany("Messages")
                        .HasForeignKey("ChatMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMember");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.DogFamily.Dog", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.DogFamily.DogFamily", "DogFamily")
                        .WithMany("Dogs")
                        .HasForeignKey("DogFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogWalker.Domain.Entities.JobRequest.JobRequest", null)
                        .WithMany("Dogs")
                        .HasForeignKey("JobRequestId");

                    b.Navigation("DogFamily");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.DogFamily.DogFamily", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.User", "User")
                        .WithOne("DogFamily")
                        .HasForeignKey("DogWalker.Domain.Entities.DogFamily.DogFamily", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Job.Job", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.DogFamily.DogFamily", "DogFamily")
                        .WithMany("Jobs")
                        .HasForeignKey("DogFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogWalker.Domain.Entities.JobRequest.JobRequest", "JobRequest")
                        .WithMany()
                        .HasForeignKey("JobRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogWalker.Domain.Entities.Walker.Walker", "Walker")
                        .WithMany("Jobs")
                        .HasForeignKey("WalkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogFamily");

                    b.Navigation("JobRequest");

                    b.Navigation("Walker");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Documents.PersonalIdentifier", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.User", "User")
                        .WithOne("PersonalIdentifier")
                        .HasForeignKey("DogWalker.Domain.Entities.JobRequest.Documents.PersonalIdentifier", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.JobRequest", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.DogFamily.DogFamily", "DogFamily")
                        .WithMany("JobRequests")
                        .HasForeignKey("DogFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogFamily");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Routes.JobDayRoute", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.JobRequest.Routes.RegularRoute", "RegularRoute")
                        .WithMany("JobDayRoutes")
                        .HasForeignKey("RegularRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegularRoute");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Routes.OneTimeRoute", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.JobRequest.JobRequest", "JobRequest")
                        .WithOne("OneTimeRoute")
                        .HasForeignKey("DogWalker.Domain.Entities.JobRequest.Routes.OneTimeRoute", "JobRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRequest");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Routes.RegularRoute", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.JobRequest.JobRequest", "JobRequest")
                        .WithOne("RegularRoute")
                        .HasForeignKey("DogWalker.Domain.Entities.JobRequest.Routes.RegularRoute", "JobRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRequest");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Schedules.JobDaySchedule", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.JobRequest.Schedules.RegularSchedule", "RegularSchedule")
                        .WithMany("JobDaySchedules")
                        .HasForeignKey("RegularScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegularSchedule");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Schedules.OneTimeSchedule", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.JobRequest.JobRequest", "JobRequest")
                        .WithOne("OneTimeSchedule")
                        .HasForeignKey("DogWalker.Domain.Entities.JobRequest.Schedules.OneTimeSchedule", "JobRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRequest");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Schedules.RegularSchedule", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.JobRequest.JobRequest", "JobRequest")
                        .WithOne("RegularSchedule")
                        .HasForeignKey("DogWalker.Domain.Entities.JobRequest.Schedules.RegularSchedule", "JobRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRequest");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Schedule.Schedule", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.Walker.Walker", null)
                        .WithMany("PossibleSchedules")
                        .HasForeignKey("WalkerId");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Walker.Walker", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.User", "User")
                        .WithOne("Walker")
                        .HasForeignKey("DogWalker.Domain.Entities.Walker.Walker", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogWalker.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.User.UserRole", b =>
                {
                    b.HasOne("DogWalker.Domain.Entities.User.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogWalker.Domain.Entities.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Chat.Chat", b =>
                {
                    b.Navigation("ChatMembers");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Chat.ChatMember", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.DogFamily.DogFamily", b =>
                {
                    b.Navigation("Dogs");

                    b.Navigation("JobRequests");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.JobRequest", b =>
                {
                    b.Navigation("Dogs");

                    b.Navigation("OneTimeRoute");

                    b.Navigation("OneTimeSchedule");

                    b.Navigation("RegularRoute");

                    b.Navigation("RegularSchedule");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Routes.RegularRoute", b =>
                {
                    b.Navigation("JobDayRoutes");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.JobRequest.Schedules.RegularSchedule", b =>
                {
                    b.Navigation("JobDaySchedules");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.User.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.User.User", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("DogFamily")
                        .IsRequired();

                    b.Navigation("PersonalIdentifier")
                        .IsRequired();

                    b.Navigation("UserRoles");

                    b.Navigation("Walker")
                        .IsRequired();
                });

            modelBuilder.Entity("DogWalker.Domain.Entities.Walker.Walker", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("PossibleSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
